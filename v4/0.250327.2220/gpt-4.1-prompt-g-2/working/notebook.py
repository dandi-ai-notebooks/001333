# %% [markdown]
# # Exploring Dandiset 001333: Parkinson's Electrophysiological Signal Dataset (PESD)
#
# **AI-generated notebook**  
# **Caution:** This notebook was automatically generated by AI and has not been fully verified by a human expert. Please use caution and review code and outputs carefully before basing any critical conclusions on the results herein.

# %% [markdown]
# ## Overview
#
# This notebook guides the user through exploring [Dandiset 001333 version 0.250327.2220](https://dandiarchive.org/dandiset/001333/0.250327.2220), the **Parkinson's Electrophysiological Signal Dataset (PESD)**. The dataset contains simulated electrophysiological signals from both healthy and parkinsonian subjects, with a focus on beta oscillations (13–30 Hz) in the subthalamic nucleus (STN) — a key pathological marker of Parkinson's Disease. 
#
# The signals are stored in Neurodata Without Borders (NWB) format and include:
# - **Beta ARV:** Average rectified voltage of beta-band LFP, frequency domain
# - **LFP:** Local field potentials from the STN, time domain
#
# For details, see the [accompanying paper on arXiv](https://arxiv.org/abs/2407.17756).
#
# ### Significance of Beta Oscillations in Parkinson's Disease
# Beta oscillations (13–30 Hz) in the subthalamic nucleus (STN) have been shown to correlate with parkinsonian symptoms; excessive beta activity is regarded as a key pathological marker of PD, associated with motor dysfunction.
#
# In this notebook you will:
# - Explore the Dandiset metadata and assets via the DANDI API
# - Load and inspect contents of an example NWB file (LFP data)
# - Visualize the LFP signal and its spectral content, emphasizing the beta band
# - Learn how to access the Beta ARV data and other files for further exploration
# > **Note**: For brevity, we use minimal data loading per example to optimize speed with remote files. Also, only one file (healthy simulation) is explored, but the same code can be applied to parkinsonian cases for comparative study.
#
# > **Important**: The goal is to illustrate how to access, explore, and visualize data from this Dandiset—not to perform exhaustive analysis or reach definitive scientific conclusions.

# %% [markdown]
# ## Required packages
#
# This notebook requires the following packages (assumed to be already installed):
#
# - numpy
# - matplotlib
# - pandas
# - pynwb
# - h5py
# - remfile
# - dandi
# - scipy

# %% [markdown]
# ## Dandiset overview and asset listing

# %%
from itertools import islice
from dandi.dandiapi import DandiAPIClient

# Connect to DANDI archive and load Dandiset metadata
client = DandiAPIClient()
dandiset = client.get_dandiset("001333", "0.250327.2220")

metadata = dandiset.get_raw_metadata()
print(f"Dandiset name: {metadata['name']}")
print(f"Dandiset URL: {metadata['url']}")
print(f"Description:\n{metadata['description']}\n")
print(f"DOI citation: {metadata['citation']}")
print(f"Version: {metadata['version']}")
print(f"Contributor(s): {metadata['contributor']}")
print(f"License(s): {metadata['license']}\n")

# List the first 5 NWB files in the Dandiset
assets = dandiset.get_assets()
print("First 5 assets:")
for asset in islice(assets, 5):
    print(f"- {asset.path} (ID: {asset.identifier})")

# %% [markdown]
# ## Selecting a file for exploration
#
# For demonstration purposes, we will explore the following NWB file from the Dandiset:
#
# **sub-healthy-simulated-lfp/sub-healthy-simulated-lfp_ses-162_ecephys.nwb**
#
# - **DANDI asset id:** `00df5264-001b-4bb0-a987-0ddfb6058961`
# - **Direct URL:** https://api.dandiarchive.org/api/assets/00df5264-001b-4bb0-a987-0ddfb6058961/download/
#
# You can also open this NWB file in [Neurosift](https://neurosift.app/nwb?url=https://api.dandiarchive.org/api/assets/00df5264-001b-4bb0-a987-0ddfb6058961/download/&dandisetId=001333&dandisetVersion=draft) for interactive exploration.

# %% [markdown]
# ## Loading the NWB file (remote streaming)
#
# Below, we load the selected NWB file directly over HTTPS using PyNWB and remfile for streaming access (no download required).

# %%
import pynwb
import h5py
import remfile

url = "https://api.dandiarchive.org/api/assets/00df5264-001b-4bb0-a987-0ddfb6058961/download/"
remote_file = remfile.File(url)
h5_file = h5py.File(remote_file, 'r')
io = pynwb.NWBHDF5IO(file=h5_file, load_namespaces=True)
nwb = io.read()

print(f"Session description: {nwb.session_description}")
print(f"Session start time: {nwb.session_start_time}")
print(f"Identifier: {nwb.identifier}")
print(f"Experiment description: {nwb.experiment_description}")
subject = nwb.subject
print(f"Subject ID: {subject.subject_id}")
print(f"Subject species: {subject.species}")
print(f"Subject age: {subject.age}")
print(f"Subject description: {subject.description}")

# %% [markdown]
# ### Basic structure of the NWB file
#
# The NWB file contains processed LFP data from a simulated human STN model. Key metadata for this session is shown below:

# %%
from pandas import DataFrame
import pandas as pd

print("\nRelated publications:", nwb.related_publications)
print("Keywords:", nwb.keywords[:])
print("Lab:", getattr(nwb, "lab", ''))
print("Institution:", getattr(nwb, "institution", ''))
print("File creation date(s):", nwb.file_create_date)

# Preview of electrode table (small, 12 electrodes)
elec_df = nwb.electrodes.to_dataframe()
print("\nElectrode table (first 5 rows):")
print(elec_df.head())

# Short markdown summary for clarity
import IPython.display as disp

tbl_md = "| id | label | group_name | location |\n|---|---|---|---|\n"
for idx, row in elec_df.iterrows():
    tbl_md += f"| {idx} | {row['label']} | {row['group_name']} | {row['location']} |\n"
disp.display(disp.Markdown("""**Electrode configuration (12 total channels):**
Each label encodes the shank and electrode index (e.g., `shank0_elec0`). All electrodes are simulated and assigned to brain regions via group and location columns.
"""))
disp.display(disp.Markdown(tbl_md))

# %% [markdown]
# ## Exploring the LFP data
#
# The LFP data is found under `nwb.processing['ecephys'].data_interfaces['LFP'].electrical_series['LFP']`.
# - **Shape:** 77,400 samples (single channel, time series)
# - **Sampling rate:** 2,000 Hz
# - **Unit:** volts

# %%
LFP = nwb.processing["ecephys"].data_interfaces["LFP"].electrical_series["LFP"]
print(f"LFP dataset shape: {LFP.data.shape}, dtype: {LFP.data.dtype}")
print(f"LFP sampling rate: {LFP.rate} Hz")
print(f"LFP unit: {LFP.unit}")
N = LFP.data.shape[0]
sample_n = min(10_000, N)
d_sample = LFP.data[:sample_n]
print(f"First {sample_n} LFP data points: mean={d_sample.mean():.4g}, std={d_sample.std():.4g}, min={d_sample.min():.4g}, max={d_sample.max():.4g}")
print("First 10 data points:", d_sample[:10])

# %% [markdown]
# ### Visualizing a short segment of the LFP signal

# %%
import numpy as np
import matplotlib.pyplot as plt

segment_len = 5000
# Only a subset plotted to avoid slowdowns (full LFP is much larger!)
lfp_seg = LFP.data[:segment_len]
time_seg = np.arange(segment_len) / LFP.rate

plt.figure(figsize=(10, 4))
plt.plot(time_seg, lfp_seg, color="k", linewidth=0.7)
plt.xlabel("Time (s)")
plt.ylabel(f"LFP ({LFP.unit})")
plt.title(f"First {segment_len:,} samples of LFP signal (subset shown for speed)")
plt.tight_layout()
plt.show()

# %% [markdown]
# The plot above shows clearly structured LFP fluctuations, consistent with plausible neurophysiological activity. The amplitude ranges from roughly -0.004 to 0.006 volts, and the timescale covers the first 2.5 seconds.

# %% [markdown]
# ### Power spectral density (PSD) of the LFP signal

# %%
from scipy.signal import welch

# We'll use the first 10,000 samples for PSD estimation (to minimize remote bandwidth and keep things interactive)
n_psd = 10_000
f, Pxx = welch(LFP.data[:n_psd], fs=LFP.rate, nperseg=2048)

plt.figure(figsize=(8, 5))
plt.semilogy(f, Pxx, label="PSD")
plt.axvspan(13, 30, color='red', alpha=0.13, label="Beta band (13–30 Hz)")
plt.xlabel("Frequency (Hz)")
plt.ylabel("PSD (V²/Hz)")
plt.title(f"Power Spectral Density of First {n_psd:,} LFP Samples")
plt.legend()
plt.tight_layout()
plt.show()

# Optional: zoom in for better beta band visualization
plt.figure(figsize=(8, 4))
plt.semilogy(f, Pxx)
plt.axvspan(13, 30, color='red', alpha=0.13)
plt.xlim(0, 50)
plt.xlabel("Frequency (Hz)")
plt.ylabel("PSD (V²/Hz)")
plt.title("PSD (First 10,000 LFP Samples, Zoomed to 0–50 Hz)")
plt.tight_layout()
plt.show()

# %% [markdown]
# The PSD plot above shows a typical 1/f profile often observed in LFP recordings. Most power is concentrated at lower frequencies. The red shaded region highlights the beta band (13–30 Hz), which is of particular interest for Parkinson's disease research. In this example, there is no prominent beta peak, which is expected in healthy subjects—but comparing parkinsonian cases may reveal increased beta band activity. 
#
# > **Note:** Only 10,000 samples are used here for PSD estimation to speed up analysis with remotely-streamed data.

# %% [markdown]
# ## Accessing Beta ARV data
#
# In addition to LFP, this dataset contains Beta Average Rectified Voltage (ARV) signals. To access this data, look within the `ecephys` processing module for a `Beta_ARV` interface. Here's how to inspect its presence and metadata:

# %%
# Demonstrate checking for Beta ARV in the current file
if "Beta_ARV" in nwb.processing["ecephys"].data_interfaces:
    beta_arv = nwb.processing["ecephys"].data_interfaces["Beta_ARV"]
    print("Beta_ARV found!")
    print("Beta_ARV description:", getattr(beta_arv, "description", ""))
    # Example: print shape/statistics if .data exists
    if hasattr(beta_arv, "data") and hasattr(beta_arv.data, "shape"):
        print("Beta ARV data shape:", beta_arv.data.shape)
        N = beta_arv.data.shape[0]
        preview = beta_arv.data[:min(10, N)]
        print("Preview Beta ARV:", preview)
    else:
        print("No data attribute on Beta_ARV interface.")
else:
    print("Beta_ARV interface not found in this file. You may need to explore other files.")

# %% [markdown]
# To compare healthy and parkinsonian signals, repeat the data loading steps above using a parkinsonian NWB file. The Dandiset assets list includes such files, typically with `sub-parkinsonian-...` prefixes. Substitute the asset URL and ID accordingly, then compare the LFP and Beta ARV data and corresponding spectra/bandpowers.
#
# *This notebook focuses on one healthy simulation for brevity, but the code is generic and can be applied to parkinsonian files for comparative analysis.*

# %% [markdown]
# ## Summary and next steps
#
# This notebook provided a guided exploration of the [PESD Dandiset](https://dandiarchive.org/dandiset/001333/0.250327.2220), focusing on:
# - Key metadata and subject/session info for the Dandiset and one example NWB file
# - Electrode group/channel structure and how to access this info programmatically
# - Methods to plot a segment of the raw LFP and examine its frequency-domain characteristics
#
# **Possible future directions:**
# - Compare healthy vs. parkinsonian simulated files to look for differences in beta power or signal structure
# - Explore the Beta ARV signals or other data interfaces in the dataset
# - Analyze longer signals or average spectra over trials
# - Investigate per-electrode signals or grouping further
#
# > For more, you can interactively browse files in [Neurosift](https://neurosift.app/nwb?url=https://api.dandiarchive.org/api/assets/00df5264-001b-4bb0-a987-0ddfb6058961/download/&dandisetId=001333&dandisetVersion=draft)
#
# ---
#  
# **End of generated notebook. Remember to validate any code and interpretations as this notebook was AI-generated.**

# %%
io.close()
h5_file.close()
remote_file.close()