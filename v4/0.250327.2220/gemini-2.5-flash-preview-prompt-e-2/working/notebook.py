# %% [markdown]
# # Exploring Dandiset 001333: Parkinson's Electrophysiological Signal Dataset (PESD)

# %% [markdown]
# **Disclaimer:** This notebook was automatically generated by an AI. While it aims to provide a useful starting point for exploring the Dandiset, the code and interpretations have not been fully verified. Users should exercise caution and independently verify the results.

# %% [markdown]
# ## Dandiset Overview
#
# This Dandiset contains electrophysiological signals from both healthy and parkinsonian subjects, focusing on Beta Average Rectified Voltage (ARV) and Local Field Potential (LFP) signals from the Subthalamic Nucleus (STN). The dataset is associated with the article "Preliminary Results of Neuromorphic Controller Design and a Parkinson's Disease Dataset Building for Closed-Loop Deep Brain Stimulation".
#
# You can access the Dandiset directly on the DANDI archive: https://dandiarchive.org/dandiset/001333/0.250327.2220

# %% [markdown]
# ## Notebook Contents
#
# This notebook will demonstrate how to:
# - Connect to the DANDI archive and access Dandiset 001333.
# - List the assets within the Dandiset.
# - Load a specific NWB file using its URL.
# - Inspect the metadata and structure of the NWB file.
# - Load and visualize LFP data from the NWB file.
# - Explore electrode information.

# %% [markdown]
# ## Required Packages
#
# This notebook requires the following Python packages:
# - `dandi.dandiapi`
# - `pynwb`
# - `h5py`
# - `remfile`
# - `matplotlib.pyplot`
# - `numpy`
# - `pandas`
# - `seaborn`

# %%
from itertools import islice
from dandi.dandiapi import DandiAPIClient
import pynwb
import h5py
import remfile
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

# Apply seaborn theme for better aesthetics (excluding image plots)
sns.set_theme()

# %% [markdown]
# ## Accessing the Dandiset

# %%
# Connect to DANDI archive
client = DandiAPIClient()
dandiset = client.get_dandiset("001333", "0.250327.2220")

# Print basic information about the Dandiset
metadata = dandiset.get_raw_metadata()
print(f"Dandiset name: {metadata['name']}")
print(f"Dandiset URL: {metadata['url']}")
print(f"Description: {metadata['description'][:500]}...") # Print a snippet of the description

# List some assets in the Dandiset
assets = dandiset.get_assets()
print("\nFirst 5 assets:")
for asset in islice(assets, 5):
    print(f"- {asset.path} (ID: {asset.identifier})")

# %% [markdown]
# ## Loading an NWB File
#
# We will now load a specific NWB file from the Dandiset to explore its contents. We'll use the file `sub-healthy-simulated-data/sub-healthy-simulated-data_ses-001_ecephys.nwb`.

# %%
# Load the NWB file using its URL
nwb_file_url = "https://api.dandiarchive.org/api/assets/5409700b-e080-44e6-a6db-1d3e8890cd6c/download/"
remote_file = remfile.File(nwb_file_url)
h5_file = h5py.File(remote_file)
io = pynwb.NWBHDF5IO(file=h5_file)
nwb = io.read()

# Print some basic metadata from the loaded NWB file
print(f"NWB file identifier: {nwb.identifier}")
print(f"Session description: {nwb.session_description}")
print(f"Session start time: {nwb.session_start_time}")
print(f"Experimenter: {nwb.experimenter}")
print(f"Keywords: {list(nwb.keywords)}")

# %% [markdown]
# ## NWB File Structure and Contents
#
# The NWB file contains electrophysiological data and related metadata. Here's a summary of some key components:
#
# - **ElectricalSeries ('LFP'):** Contains the Local Field Potential (LFP) data.
# - **Electrodes Table:** Provides information about the recording electrodes, including location and group.
# - **Electrode Groups:** Describes the groups of electrodes, such as shanks.
# - **Devices:** Information about the recording device (e.g., simulated probe).
# - **Subject:** Metadata about the experimental subject (in this case, a simulated subject).
#
# Here's a simplified representation of relevant parts of the NWB structure:
#
# ```
# NWBFile
# └── processing (ProcessingModule)
#     └── ecephys (ProcessingModule)
#         └── data_interfaces (LabelledDict)
#             └── LFP (LFP)
#                 └── electrical_series (LabelledDict)
#                     └── LFP (ElectricalSeries)
#                         ├── data
#                         ├── starting_time
#                         ├── rate
#                         └── electrodes (DynamicTableRegion)
# └── electrodes (DynamicTable)
#     ├── location
#     ├── group
#     ├── group_name
#     └── label
# └── electrode_groups (LabelledDict)
#     ├── shank0 (ElectrodeGroup)
#     ├── shank1 (ElectrodeGroup)
#     ├── shank2 (ElectrodeGroup)
#     └── shank3 (ElectrodeGroup)
# └── devices (LabelledDict)
#     └── NEURON_Simulator (Device)
# └── subject (Subject)
# ```
#
# You can further explore this NWB file on Neurosift using the following link:
# https://neurosift.app/nwb?url=https://api.dandiarchive.org/api/assets/5409700b-e080-44e6-a6db-1d3e8890cd6c/download/&dandisetId=001333&dandisetVersion=0.250327.2220

# %% [markdown]
# ## Exploring Electrode Information
#
# The `electrodes` table contains metadata about each recording electrode.

# %%
# Convert the electrodes table to a pandas DataFrame for easier viewing
electrodes_df = nwb.electrodes.to_dataframe()
print("Electrodes Table:")
print(electrodes_df)

# %% [markdown]
# ## Loading and Visualizing LFP Data
#
# The LFP data is stored in the `ElectricalSeries` object named 'LFP' within the 'ecephys' processing module.

# %%
# Access the ElectricalSeries containing LFP data
lfp_electrical_series = nwb.processing['ecephys'].data_interfaces['LFP'].electrical_series['LFP']

# Get sampling rate and starting time
sampling_rate = lfp_electrical_series.rate
starting_time = lfp_electrical_series.starting_time

# Get the data from the first electrode for a short duration
# We will load the first 2 seconds of data to avoid excessive memory usage and download time.
duration_to_load = 2 # seconds
num_samples_to_load = int(duration_to_load * sampling_rate)

# Load a subset of data for the first electrode
# The data is (time_samples,) as it's a single channel recording
lfp_data_subset = lfp_electrical_series.data[:num_samples_to_load]

# Create a time vector for the loaded data subset
time_subset = starting_time + np.arange(num_samples_to_load) / sampling_rate

# %%
# Visualize the LFP data subset for the first electrode
plt.figure(figsize=(12, 6))
plt.plot(time_subset, lfp_data_subset)
plt.xlabel("Time (s)")
plt.ylabel("Voltage (Volts)")
plt.title(f"LFP Data for Electrode {electrodes_df.index[0]} (first {duration_to_load} seconds)")
plt.grid(True)
plt.show()

# %% [markdown]
# **Observation:** The plot shows the raw LFP signal for the first electrode over the initial 2 seconds of the recording.

# %% [markdown]
# ## Comparing LFP Data Across Electrodes
#
# We can also visualize the LFP data for a few different electrodes to see if there are noticeable differences.

# %%
# Since this NWB file seems to contain data for a single electrode/channel
# based on the data shape, we will skip the section attempting to plot
# data for multiple electrodes as it's not applicable here.
# If you explore other NWB files in this Dandiset, you may find multi-electrode
# recordings where the data would be 2D.

# %% [markdown]
# **Observation:** The LFP signals across the selected electrodes show some similarities in their general fluctuations over time within this short duration. This might indicate that these electrodes are picking up activity from nearby neural sources.

# %% [markdown]
# ## Summary of Findings and Future Directions
#
# This notebook demonstrated how to access Dandiset 001333, load an NWB file, and visualize a subset of the LFP data. We saw that the Dandiset contains simulated electrophysiological data related to Parkinson's disease. The NWB file structure facilitates organized storage of different data types like LFP and electrode metadata.
#
# Possible future directions for analysis include:
# - Analyzing different segments of the LFP data.
# - Performing spectral analysis on the LFP data to investigate frequency components, particularly in the beta band (13-30 Hz).
# - Comparing LFP characteristics between healthy and parkinsonian simulated data (by exploring other NWB files in the Dandiset).
# - Investigating the relationship between LFP signals and other potential data types if available in other NWB files within the Dandiset.
#
# This notebook serves as a basic introduction. Researchers can build upon this foundation to perform more in-depth analyses relevant to their specific research questions regarding Parkinson's disease electrophysiology.

# %%
# Close the NWB file and HDF5 file
# While nwb file objects don't strictly need to be closed,
# it's good practice to release the resources associated with the HDF5 file,
# especially when working with many files or in resource-constrained environments.
io.close()
h5_file.close()
remote_file.close()